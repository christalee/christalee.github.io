<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Christalee Bieber - Teal Labs, Inc.</title><link href="/" rel="alternate"></link><link href="https://christalee.teallabs.org/feeds/atom.xml" rel="self"></link><id>/</id><updated>2023-10-02T00:00:00-04:00</updated><entry><title>the joy of react</title><link href="/posts/the-joy-of-react.html" rel="alternate"></link><published>2023-10-02T00:00:00-04:00</published><updated>2023-10-02T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2023-10-02:/posts/the-joy-of-react.html</id><summary type="html">&lt;p&gt;I've recently started some PD at work with &lt;a href="https://www.joyofreact.com/"&gt;The Joy of React&lt;/a&gt;, a course by React maven Josh Comeau. It promises to teach me not just the basics but also some "happy practices" (hedging on "best practices") that I'm expected to bring back to my daily practice. Several of my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've recently started some PD at work with &lt;a href="https://www.joyofreact.com/"&gt;The Joy of React&lt;/a&gt;, a course by React maven Josh Comeau. It promises to teach me not just the basics but also some "happy practices" (hedging on "best practices") that I'm expected to bring back to my daily practice. Several of my coworkers have joined, mostly backend devs who want to expand their skills (being on a full-stack team).&lt;/p&gt;
&lt;p&gt;Since I haven't written in this blog since starting work, basically, I should probably describe what I do. I work at a health tech startup, building reasonable interfaces for a complex, data-rich system. After focusing on our page that summarizes all the available information for a specific patient (in digital and print!), I've shifted into rebuilding that view, optimized now for being rendered responsively in an iframe inside a medical records program. We're targeting Epic first, but hoping to extend our work to other EMRs without much additional work. This work relies on open protocols like OAuth and SMART on FHIR, but I haven't had to grapple much with that. Primarily I've been doing the React side, pulling together action items and presenting them to the provider to be filled out. (We hope to minimize dual documentation in a future project.)&lt;/p&gt;
&lt;p&gt;Taking this Joy of React course, so far I am reminded not to take anything for granted - just because I use React every day, doesn't mean I have nothing to learn! Some of it is down to differences in our codebase - for example, we use &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; while the course uses &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;. A recent lesson on forms was frustrating because we use a library / base components for forms instead of the raw HTML elements, so I don't remember the syntax of regular forms particularly well. But I'm moving along with it, in my downtime. My goals look something like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a model of how to design complex state without drowning (we have some complex components in our codebase, primarily because everyone was focused on adding one more feature and never stepped back to say, is it time to refactor now?)&lt;/li&gt;
&lt;li&gt;gain confidence in my ability to design my own hooks (this is more about error handling and possibly working with Promises)&lt;/li&gt;
&lt;li&gt;understand better how to organize functions and components for readability and ease-of-use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully I'll learn these lessons and find opportunities to apply them straightforwardly.&lt;/p&gt;</content><category term="posts"></category><category term="javascript"></category><category term="programming"></category></entry><entry><title>rc-niceties</title><link href="/posts/rc-niceties.html" rel="alternate"></link><published>2021-06-07T00:00:00-04:00</published><updated>2021-06-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-06-07:/posts/rc-niceties.html</id><summary type="html">&lt;p&gt;A frequent comment about the Recurse Center is "everyone here is so nice!" Perhaps due to careful admissions, or the &lt;a href="https://www.recurse.com/manual#sub-sec-social-rules"&gt;social rules&lt;/a&gt;, RC participants strive to keep it a supportive community where people are open to others: working together, communicating carefully, and respecting each other. One mechanism for building the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A frequent comment about the Recurse Center is "everyone here is so nice!" Perhaps due to careful admissions, or the &lt;a href="https://www.recurse.com/manual#sub-sec-social-rules"&gt;social rules&lt;/a&gt;, RC participants strive to keep it a supportive community where people are open to others: working together, communicating carefully, and respecting each other. One mechanism for building the community is Niceties, a periodic opportunity to give compliments about your fellow Recursers. Typically calls go out for Niceties in the last week of a batch, and each participant has one Nicety read aloud at their Never Graduate ceremony on Friday.&lt;/p&gt;
&lt;p&gt;Currently Niceties are administered through a Google Form, but once upon a time, some Recursers wrote an app for them. It lives at niceties.recurse.com and when I first encountered it, it was closed. I thought this was a sorry state of affairs and responded to a "good-first-issue" with a pull request, adding a note to the front page that the site was down. I'd been looking for an open source project to contribute to, and this seemed like a good candidate, so I tackled a few more issues. Luckily one of the maintainers, &lt;a href="https://github.com/jasonaowen"&gt;@jasonaowen&lt;/a&gt;, welcomed me to the project with helpful suggestions and an agreement to review my PRs. We set up a weekly meeting where we could prioritize issues, brainstorm together, and pair on tricky bits of code. This has been invaluable for me in learning to collaborate with other programmers, and helped me make slow but steady progress that really contrasts with the faster pace of a project where I'm the sole designer and programmer. I've figured out a reasonable git workflow and even juggled some tricky &lt;code&gt;git rebase -i&lt;/code&gt; situations.&lt;/p&gt;
&lt;p&gt;You would think that an app for saying nice things about people would be straightforward, but it's surprisingly complex in the edge cases. Some of the complexity comes from the fact that the app automatically calculates which users should be shown on the screen at a time, but users can change their batch membership at any time, by extending from 6 to 12 weeks or signing up for another 6 or 12 week stint at RC. Should a user who extends their batch be shown twice? Niceties are stored in the database with a unique constraint of author-target-batch, so if we only show the user once, which batch should their data be listed under? The app has a view for the faculty to compile all the niceties for each recipient and print them out, but currently they are emailing them instead of handing out paper. And, of course, the codebase uses Flask on the backend and 2016-era React on the frontend, and bringing that code in line with modern practices is a task all on its own. The app relies on queries to the RC API, which has been revised since the app was written, so those requests needed updating as well.&lt;/p&gt;
&lt;p&gt;Most of the work I've done on rc-niceties has been towards fixing bugs, introducing a database migration scheme so we can make changes to the DB, and refactoring the frontend so we can upgrade React. Recently we had a lovely feedback session with some RC faculty to clarify use-cases and prioritize next steps. rc-niceties has one more round of DB schema changes and bug squashing before it's ready for re-opening, and I'm happy to say that @jasonaowen and I have recruited another Recurser, &lt;a href="https://github.com/tas09009"&gt;@tas09009&lt;/a&gt;, to work on it. I look forward to having the app working again and bringing joy to my community. (cf.&lt;a href="https://joy.recurse.com/"&gt;Joy of Computing&lt;/a&gt;)&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="python"></category><category term="javascript"></category><category term="RC"></category><category term="programming"></category></entry><entry><title>Outreachy</title><link href="/posts/outreachy.html" rel="alternate"></link><published>2021-04-07T00:00:00-04:00</published><updated>2021-04-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-04-07:/posts/outreachy.html</id><summary type="html">&lt;p&gt;Last month I applied to &lt;a href="https://www.outreachy.org/"&gt;Outreachy&lt;/a&gt;, a paid internship for non-students from underrepresented groups in technology. Instead of interviewing based on your resume, part of the application involves making a contribution to the open source project you're hoping to work for. Since the internship employers tend to be big names …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last month I applied to &lt;a href="https://www.outreachy.org/"&gt;Outreachy&lt;/a&gt;, a paid internship for non-students from underrepresented groups in technology. Instead of interviewing based on your resume, part of the application involves making a contribution to the open source project you're hoping to work for. Since the internship employers tend to be big names in open source (Apache, Red Hat, the Linux Foundation, Mozilla, Wikimedia) this can be a bit intimidating. The process is very well documented, however, and volunteer mentors are available to help you as you work.&lt;/p&gt;
&lt;p&gt;I chose to submit two contributions to the Wikimedia Foundation, for two different projects of theirs. I appreciated that they carefully scaffolded the contribution process, asking every applicant to complete the same task, instead of just setting us free in the bug tracker. For large projects with many current and aspiring contributors, it can be tough to find a bug that's appropriate for a new programmer and claim it before someone else does, much less complete the work in a reasonable amount of time while following local conventions for contributors. I looked for such a thing with other projects and ultimately didn't find anything within the application timeframe. Luckily the Wikimedia application tasks were well-specified, the mentors were quite responsive, and the tasks themselves were right up my alley: writing Python to analyze data and teach others.&lt;/p&gt;
&lt;p&gt;One contribution I made was part of a larger project to write tutorials and tools for users to explore Wikipedia datasets. The task required both writing Python to analyze and visualize the data, and strong technical writing to explain the problem and potential  solutions. We started with a &lt;a href="https://public.paws.wmcloud.org/User:Isaac_(WMF)/Outreachy%20Summer%202021/Wikipedia_Edit_Tags.ipynb"&gt;partial outline&lt;/a&gt; and filled in the gaps, resulting in &lt;a href="https://public.paws.wmcloud.org/User:Christalee_b/[Outreachy]%20Wikipedia%20Edit%20Tags.ipynb"&gt;a tutorial&lt;/a&gt; aimed at users who want to investigate trends in Wikipedia edits.&lt;/p&gt;
&lt;p&gt;Another contribution was for a project to build a tool to analyze how users navigate through Wikipedia, based on clickstream data. This task only required writing Python, although I ran into some challenges: the clickstream dataset is quite large, and using the idiomatic &lt;code&gt;if x in y&lt;/code&gt; was prohibitively slow, so I wrote a little implementation of binary search to improve performance; and I initially couldn't figure out how to create a nice diagram showing clicks to and from an article. I started using &lt;a href="https://networkx.org/documentation/stable/auto_examples/index.html"&gt;&lt;code&gt;networkx&lt;/code&gt;&lt;/a&gt; but was dissatisfied with the results. Then a comment from another contributor turned me on to Sankey diagrams, and suggested &lt;a href="https://plotly.com/python/"&gt;Plotly&lt;/a&gt; as a way to graph them. I couldn't get Plotly to show up so I tried &lt;a href="http://holoviews.org/gallery/index.html"&gt;&lt;code&gt;holoviews&lt;/code&gt;&lt;/a&gt; and that worked great! I also used &lt;code&gt;pandas&lt;/code&gt; a bit in this project, collecting Top 10 sources and destinations in English and German for a specific page, &lt;code&gt;Alan_Turing&lt;/code&gt;. Check out the &lt;a href="https://public.paws.wmcloud.org/User:Christalee_b/[Outreachy]%20Wikipedia%20Clickstream.ipynb"&gt;results&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Working on these notebooks was pretty fun, although I spent more time than I should've. I don't anticipate budgeting that much time for other job app take-homes, for example. But I wanted to do a good job and give it my best shot, which turns out to be pretty decent. Hopefully the mentors will agree with me and I'll get an internship!&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="python"></category><category term="programming"></category></entry><entry><title>syntax highlighting &amp; feeds</title><link href="/posts/syntax-highlighting-feeds.html" rel="alternate"></link><published>2021-02-16T00:00:00-05:00</published><updated>2021-02-16T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-02-16:/posts/syntax-highlighting-feeds.html</id><summary type="html">&lt;p&gt;I haven't written much about the process of putting this blog together because I want it to speak for itself, but I wanted to write a short note about two features I added today. One was syntax highlighting, using pygment's 'friendly' theme. (Thanks to &lt;a href="https://help.farbox.com/pygments.html"&gt;this gallery&lt;/a&gt; for showing off the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I haven't written much about the process of putting this blog together because I want it to speak for itself, but I wanted to write a short note about two features I added today. One was syntax highlighting, using pygment's 'friendly' theme. (Thanks to &lt;a href="https://help.farbox.com/pygments.html"&gt;this gallery&lt;/a&gt; for showing off the default themes!) It was not as straightforward as the docs suggested, in that I needed to generate or acquire a CSS file for my preferred theme. The results are visible in my previous post on PageRank. The first snippet specifies that python highlighting is needed, but the second snippet uses generic &lt;code&gt;```code```&lt;/code&gt; syntax and seems to work just fine. (Python may be the default, come to think of it.)&lt;/p&gt;
&lt;p&gt;The other update is that if you would like to subscribe to my blog, feeds are now available! There is an &lt;a href="https://christalee.teallabs.org/feeds/rss.xml"&gt;RSS feed&lt;/a&gt;, an &lt;a href="https://christalee.teallabs.org/feeds/atom.xml"&gt;Atom feed&lt;/a&gt;, plus &lt;code&gt;all.rss.xml&lt;/code&gt; and &lt;code&gt;all.atom.xml&lt;/code&gt; which are probably identical.&lt;/p&gt;
&lt;p&gt;Bonus feature: previous and next links at the bottom of each post, as there are now enough that someone might want to browse through them!&lt;/p&gt;</content><category term="posts"></category><category term="programming"></category></entry><entry><title>PageRanking RC Zulip</title><link href="/posts/pageranking-rc-zulip.html" rel="alternate"></link><published>2021-02-15T00:00:00-05:00</published><updated>2021-02-15T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-02-15:/posts/pageranking-rc-zulip.html</id><summary type="html">&lt;p&gt;Over the past couple of weeks, I and some colleagues in the &lt;em&gt;&lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python#toc"&gt;Mastering Large Datasets with Python&lt;/a&gt;&lt;/em&gt; group have been practicing our new ability to scrape and process large amount of data with Spark, by harvesting public messages from the RC Zulip and analyzing them. (For those unfamiliar with &lt;a href="https://zulip.com/"&gt;Zulip …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past couple of weeks, I and some colleagues in the &lt;em&gt;&lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python#toc"&gt;Mastering Large Datasets with Python&lt;/a&gt;&lt;/em&gt; group have been practicing our new ability to scrape and process large amount of data with Spark, by harvesting public messages from the RC Zulip and analyzing them. (For those unfamiliar with &lt;a href="https://zulip.com/"&gt;Zulip&lt;/a&gt;, it's similar to Slack, with channels and mentions.) Although it doesn't quite qualify as "Big Data", the dataset contains ~800,000 messages, which is fodder for all sorts of questions about who posts, when, on what topics, etc. I've been focusing on implementing PageRank based on @mentions, following the book's example, and found it pretty straightforward once I performed some basic text cleanup.&lt;/p&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/pr_top10_graph.png" /&gt;
&lt;figcaption class="small"&gt;User ratings over 10 cycles of PageRanking&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I gave a &lt;a href="https://docs.google.com/presentation/d/1E4sh81x317Qfqi5LneRF4iFPndK_cO01H8_fatm3DvQ/edit?usp=sharing"&gt;short presentation&lt;/a&gt; on Friday about the work done so far. Today I worked a bit on one of the next steps: a function to automatically stop the algorithm once it's run "long enough". Originally I was running it for 10 cycles, which I suspected was overkill. I started by generating a list of lists, containing the top 10 users and their ratings, for each cycle. After some massaging, I generated this graph, which shows the scores per user over time. Visual inspection suggests the ratings settle down after 4 cycles, but I'd like to calculate that directly, if possible.&lt;/p&gt;
&lt;p&gt;I ended up writing a helper function that, given two sets of top 10 users and their ratings, first compares the users to ensure both sets are the same. If not, it returns one set of names. If so, it calculates the element-wise difference of the ratings and returns them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compare10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;names_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;names_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;names_a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;names_b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;names_a&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;diffs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I called this function after a couple of rounds, to compare the current round with the previous two rounds. If the differences between subsequent rounds aren't changing, I'm comfortable declaring the loop finished. Depending on how many places I &lt;code&gt;round&lt;/code&gt; to, this turns out to be 7, 10, or 23 cycles! I guess appearances are deceiving. (Machine learning hyperparameter tuning relies heavily on picking values off graphs, which I'm suddenly much more skeptical of...)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;finished:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parallelize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;acc0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pr_empty&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pr_acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pr_comb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;top10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;[&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;zs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;x:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compare10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;compare10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;finished&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="posts"></category><category term="RC"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Puzzling Goings-On</title><link href="/posts/puzzling-goings-on.html" rel="alternate"></link><published>2021-02-11T00:00:00-05:00</published><updated>2021-02-11T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-02-11:/posts/puzzling-goings-on.html</id><summary type="html">&lt;p&gt;Today, an RC colleague organized a group to tackle &lt;a href="https://github.com/nivbend/gitstery"&gt;a git mystery&lt;/a&gt;, in which murder has been done and the clues are hidden in commit messages. My group did not solve the crime within the hour, nor did we limit ourselves to git commands. But we appreciated the spirit of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, an RC colleague organized a group to tackle &lt;a href="https://github.com/nivbend/gitstery"&gt;a git mystery&lt;/a&gt;, in which murder has been done and the clues are hidden in commit messages. My group did not solve the crime within the hour, nor did we limit ourselves to git commands. But we appreciated the spirit of the exercise and became familiar with git concepts such as tags, &lt;code&gt;log&lt;/code&gt; vs. &lt;code&gt;show&lt;/code&gt;, the &lt;code&gt;--author&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;, and &lt;code&gt;--until&lt;/code&gt; flags, the &lt;code&gt;HEAD~n&lt;/code&gt; syntax for referencing the nth commit, and how to read diffs. Many objected to the flimsy evidence used to finger the suspect, and I do wish there had been more clues - the story resolved abruptly. I enjoyed myself, though, and look forward to next week's &lt;a href="https://github.com/veltman/clmystery"&gt;command line murders&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get into the proper mood, I spend some time earlier solving &lt;a href="https://mystery.knightlab.com/"&gt;an SQL mystery&lt;/a&gt;, with a similar premise: investigation reports and clues are scattered through a database, and you need to query them properly to narrow down the suspects. I liked that this mystery did not stop after you found the culprit, but asked for more complex queries to identify the mastermind behind the crime. I managed to solve it nearly entirely with &lt;code&gt;SELECT * FROM example WHERE field1 = x AND field2 = y&lt;/code&gt;, by taking copious notes and replaying queries periodically, but I'd like to re-do it with more sophisticated &lt;code&gt;JOIN&lt;/code&gt;s now that I've reviewed the walkthrough. My lackluster showing suggests I should go ahead and dive into &lt;a href="https://bigmachine.io/products/a-curious-moon/"&gt;A Curious Moon&lt;/a&gt;, a science mystery using data from the Cassini mission, which several RCers have recommended / gone through.&lt;/p&gt;
&lt;p&gt;I also participated this week in a birthday puzzle party in which we learned how to solve &lt;a href="https://www.gmpuzzles.com/blog/category/loop/yajilin/"&gt;yajilin puzzles&lt;/a&gt;, a particular favorite of the birthday girl. In fact, she's been learning to write them, although she didn't include her own puzzles in the festivities. I had fun collaborating with some RCers I haven't spent much time with previously, and of course solving puzzles is always a blast. Some people got predictably hung up on whether each step was provable with how much information on the board, but I'd rather intuit my next steps and backtrack if they turn out to be wrong.&lt;/p&gt;
&lt;p&gt;This lack of rigor has also lead me to solving some Leetcode problems in non-standard ways, or at least, without using whatever data structure I'm supposed to be learning about. Usually their solutions seem extra convoluted to me, but maybe they make sense in other languages. I'm slowly getting over my resentment about the interview hazing that Leetcode and its friends represent. I'm trying to be grateful that someone has identified a relatively finite amount of content that can be mastered, and organized resources for learning it. Treating them like Advent of Code puzzles also helps, except I keep running into the pesky runtime limit.&lt;/p&gt;
&lt;p&gt;Four things more than make a post, and I need to throw together some slides for a PageRank talk this afternoon.&lt;/p&gt;</content><category term="posts"></category><category term="RC"></category><category term="programming"></category><category term="hobbies"></category></entry><entry><title>Cost of Drinking</title><link href="/posts/cost-of-drinking.html" rel="alternate"></link><published>2021-02-07T00:00:00-05:00</published><updated>2021-02-07T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-02-07:/posts/cost-of-drinking.html</id><summary type="html">&lt;p&gt;When I started at the Recurse Center, I had several vague ideas of projects I wanted to work on. A throwaway comment on the price of beer in Budapest inspired me to see if beer could be used as a cost of living metric. The first maps I found polled …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I started at the Recurse Center, I had several vague ideas of projects I wanted to work on. A throwaway comment on the price of beer in Budapest inspired me to see if beer could be used as a cost of living metric. The first maps I found polled a single city per country, typically the capital or largest city, which seemed unrepresentative: everyone knows the cost of living is high in New York, Tokyo, or London. So I wanted to gather data by city, average it across various sources, and map it. Since beer is not globally popular, though (in Saudi Arabia, it's illegal), I decided to expand my analysis to coffee, which is widely available even in non-coffee cultures, and bread, since everyone needs something to nibble on with their beer. (In my household, we make some of our beer and bake some of our bread; we do not roast our own coffee.)&lt;/p&gt;
&lt;p&gt;I collaborated with &lt;a href="https://github.com/apettenati"&gt;apettenati&lt;/a&gt; on the data scraping (&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"&gt;Beautiful Soup&lt;/a&gt;) and cleaning (&lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;) phase. We split up our data sources: DeutscheBank's &lt;a href="https://www.dbresearch.com/PROD/RPS_EN-PROD/Mapping_the_world_prices_2019/RPS_EN_DOC_VIEW.calias?rwnode=PROD0000000000436748&amp;amp;ProdCollection=PROD0000000000505140"&gt;survey of world prices&lt;/a&gt;, &lt;a href="https://www.expatistan.com/cost-of-living"&gt;Expatistan&lt;/a&gt;, &lt;a href="https://www.numbeo.com/cost-of-living/"&gt;Numbeo&lt;/a&gt;, and &lt;a href="http://www.pintprice.com/"&gt;PintPrice&lt;/a&gt;. Initially I made a proof-of-concept map in &lt;a href="https://python-visualization.github.io/folium/"&gt;folium&lt;/a&gt;, but quickly realized I needed to switch to JavaScript, for a feature that restricted the number of markers based on the zoom level, to avoid overcrowding the map. So I tried &lt;a href="https://leafletjs.com/"&gt;Leaflet.JS&lt;/a&gt; and found it reasonably easy to work with. Folium had given me the idea for charts in popups, though, so I turned to &lt;a href="https://www.chartjs.org/"&gt;Chart.JS&lt;/a&gt; to create those. I'm still not entirely comfortable in JavaScript but this project was a major step forward in my understanding. The payoff of having a snazzy visualization was surprisingly motivational (in direct contrast to the data cleaning phase, which was tedious beyond belief but also essential.)&lt;/p&gt;
&lt;p&gt;Check out the code on &lt;a href="https://github.com/christalee/cost-of-drinking"&gt;Github&lt;/a&gt; and the map itself &lt;a href="/pages/cost-of-drinking.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="programming"></category><category term="hobbies"></category><category term="python"></category><category term="javascript"></category><category term="RC"></category></entry><entry><title>Three Things Learned</title><link href="/posts/three-things-learned.html" rel="alternate"></link><published>2021-02-04T00:00:00-05:00</published><updated>2021-02-04T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-02-04:/posts/three-things-learned.html</id><summary type="html">&lt;p&gt;I haven't been keeping up with this blog, but I have been keeping busy. A few things I've learned recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Although JavaScript has a &lt;code&gt;typeof&lt;/code&gt; command, it doesn't produce very useful output. In particular, it yields &lt;code&gt;object&lt;/code&gt; no matter whether the structure in question is a Map, an Array, a …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I haven't been keeping up with this blog, but I have been keeping busy. A few things I've learned recently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Although JavaScript has a &lt;code&gt;typeof&lt;/code&gt; command, it doesn't produce very useful output. In particular, it yields &lt;code&gt;object&lt;/code&gt; no matter whether the structure in question is a Map, an Array, a Set, or an Object. Apparently, &lt;code&gt;x.constructor&lt;/code&gt; is how to find out what type something actually is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On bash, &lt;code&gt;which&lt;/code&gt; is a program, not a builtin. So it's not aware of aliases, like &lt;code&gt;python='python3'&lt;/code&gt;. Neither is &lt;code&gt;sudo&lt;/code&gt;. So you can check &lt;code&gt;python --version &amp;gt;= 3&lt;/code&gt; but that's no guarantee that &lt;code&gt;sudo pip install&lt;/code&gt; or &lt;code&gt;sudo python -m pip install&lt;/code&gt; will be python3. It makes me rethink the utility of aliases, and possibly virtualenvs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python lists are not implemented with pointers like Lisp lists! Per &lt;a href="https://norvig.com/python-lisp.html"&gt;Peter Norvig&lt;/a&gt;, Python list access is O(1); per the &lt;a href="https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython"&gt;Python Design and History FAQ&lt;/a&gt;, they are contiguous memory chunks with a head pointer and length value stored up front.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Three things make a post, plus it's dinnertime: fried tofu w/ bbq sauce, risotto, and Sichuan dry-fried mushrooms &amp;amp; peppers.&lt;/p&gt;</content><category term="posts"></category><category term="RC"></category><category term="programming"></category><category term="javascript"></category><category term="python"></category></entry><entry><title>refactoring checklist; ML project ideas</title><link href="/posts/refactoring-checklist-ml-project-ideas.html" rel="alternate"></link><published>2021-01-19T00:00:00-05:00</published><updated>2021-01-19T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-01-19:/posts/refactoring-checklist-ml-project-ideas.html</id><summary type="html">&lt;p&gt;In a recent conversation I mentioned that when I meet a new Python feature, I add it to my refactoring checklist. Someone asked me to share that checklist, and here it is, slightly expanded:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write all comments/docstrings&lt;/li&gt;
&lt;li&gt;resolve all TODOs&lt;/li&gt;
&lt;li&gt;add types to all fn declarations and key local …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;In a recent conversation I mentioned that when I meet a new Python feature, I add it to my refactoring checklist. Someone asked me to share that checklist, and here it is, slightly expanded:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write all comments/docstrings&lt;/li&gt;
&lt;li&gt;resolve all TODOs&lt;/li&gt;
&lt;li&gt;add types to all fn declarations and key local vars&lt;/li&gt;
&lt;li&gt;expand short names to something explanatory&lt;/li&gt;
&lt;li&gt;for loops -&amp;gt; list comprehensions&lt;/li&gt;
&lt;li&gt;use dict comprehensions&lt;/li&gt;
&lt;li&gt;use generator or lazy iterator?&lt;/li&gt;
&lt;li&gt;use collections.Counter to count things&lt;/li&gt;
&lt;li&gt;use map, filter, reduce?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously this doesn't address the "main" work of refactoring, like moving chunks of code around. But it's a list of stuff to look out for before pushing for public consumption, to encourage my code to be elegant, concise, and useable.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;In other news, I'm looking for excuses to use the Heap computing cluster, which means a machine learning problem with significant HD or processor requirements. So far I'm considering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;restarting my Bengali.AI OCR project&lt;/li&gt;
&lt;li&gt;doing something involving text prediction/generation, like Byronic poetry or Shakespearean sonnets or murder ballads&lt;ul&gt;
&lt;li&gt;definitely want a PD corpus&lt;/li&gt;
&lt;li&gt;pairing with a colleague taught me about beam search, which generates several high-scoring text strings rather than simply the best token-by-token one&lt;/li&gt;
&lt;li&gt;inspiration: &lt;a href="https://www.tensorflow.org/tutorials/text/text_generation"&gt;text generation with an RNN&lt;/a&gt;, Coursera NLP with Tensorflow Week 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;helping experiment with a colleague's image captioning AI&lt;/li&gt;
&lt;li&gt;some Kaggle competition TBD?&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="programming"></category><category term="RC"></category></entry><entry><title>RC Week 1</title><link href="/posts/rc-week-1.html" rel="alternate"></link><published>2021-01-09T00:00:00-05:00</published><updated>2021-01-09T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-01-09:/posts/rc-week-1.html</id><summary type="html">&lt;p&gt;My first week at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt; has been a bit of a firehose, mostly socially. It wasn't until Friday that I found myself with more than an hour of unbroken coding time, between orientation activities, chats/pairing with fellow RCers, presentations and craft evening and feelings check-in and more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My first week at the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt; has been a bit of a firehose, mostly socially. It wasn't until Friday that I found myself with more than an hour of unbroken coding time, between orientation activities, chats/pairing with fellow RCers, presentations and craft evening and feelings check-in and more. I feel quite well oriented, and I've fleshed out some ideas from &lt;a href="/posts/rc-day-1.html"&gt;my previous post&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;visualizing the global cost of living through the cost of a beer, a cappuccino, and a loaf of bread. (I would prefer either coffee/tea/beer or wine/bread/cheese, for theming, but this is where we're starting.) I'd like to use &lt;a href="https://python-visualization.github.io/folium/"&gt;Folium&lt;/a&gt; to build a map with data by city, using data from several sources: &lt;a href="https://www.numbeo.com/cost-of-living/"&gt;Numbeo&lt;/a&gt;, &lt;a href="https://www.expatistan.com/cost-of-living"&gt;Expatistan&lt;/a&gt;, Deutsche Bank's &lt;a href="https://www.dbresearch.com/PROD/RPS_EN-PROD/Mapping_the_world_prices_2019/RPS_EN_DOC_VIEW.calias?rwnode=PROD0000000000436748&amp;amp;ProdCollection=PROD0000000000505140"&gt;annual prices index&lt;/a&gt;, and &lt;a href="http://www.pintprice.com/"&gt;PintPrice&lt;/a&gt;. Features we'd like to build include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;changing how many markers show up as you zoom / pan so the view isn't too crowded&lt;/li&gt;
&lt;li&gt;popup bar charts showing the price data on click&lt;/li&gt;
&lt;li&gt;layer selectors (?) so you can turn each indicator on/off&lt;/li&gt;
&lt;li&gt;some clever interpolation or fill between cities?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily I have a colleague working on this with me, she's somewhat new to Python but has jumped right into &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; and data cleaning/scraping. I'm a little concerned we won't be able to write all features with Folium but will have to manipulate the underlying Leaflet map directly with JS? Or maybe &lt;a href="https://ipyleaflet.readthedocs.io/en/latest/"&gt;ipyleaflet&lt;/a&gt; will be the ticket. I also need to give more thought to whether it's feasible to perform all the data transformation on the server or client side, or pre-calculate every subset vs. calculations on request. Another colleague has a project mapping NYPD misconduct complaints, he'd be a good person to talk to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;building a font that varies its letterforms over time. I thought this would be extremely difficult and require messing around with FontForge / similar, but someone pointed me to this &lt;a href="https://web.dev/variable-fonts/"&gt;primer on variable fonts&lt;/a&gt; and now I wonder if it might be as straightforward as writing some JS to manipulate the font axes and re-render the text. The features I'm considering have different time constants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O/o show the phase of the moon&lt;/li&gt;
&lt;li&gt;T and Y show seasonal trees&lt;/li&gt;
&lt;li&gt;i and j might be flowers?&lt;/li&gt;
&lt;li&gt;stroke thickness varies over the course of an hour, or (for testing) as you scroll down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mostly I've been making (slow) progress on the cost of living visualization, Coursera NLP, and &lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python"&gt;MLDP&lt;/a&gt;. I look forward to next week, when I can get some momentum going those fronts, and maybe do some productive pairing. (Social) networking is one of my goals, not just studying and producing portfolio work, so I'll also schedule a few chats. I may be more accustomed to guiding my own time/priorities than most of my colleagues, but that doesn't make me magically good at it, and I don't usually do it in the presence of so many skilled peers, so I'm hitting a learning curve like everyone else. Participating in feelings check-in was a bit of revelation, it's been a while since I've been in that sort of group therapy space, but I pulled out my empathizing skills and did my best. In the next couple of weeks, I'd like to make some tangible progress I can be proud of, whether it's helping others with their cool project or presenting on my own.&lt;/p&gt;
&lt;p&gt;Bits and pieces I learned this week:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this is valid Python syntax that evaluates the type of x and uses it to cast x+1 back to that type: &lt;code&gt;type(x)(x+1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;good review of threading vs. multiprocessing in Python and the vagaries of the GIL&lt;/li&gt;
&lt;li&gt;successfully wrote some code using &lt;code&gt;try...except&lt;/code&gt;, a pattern I never use&lt;/li&gt;
&lt;li&gt;playtested a CLI puzzle and learned about &lt;code&gt;getfacl&lt;/code&gt;/&lt;code&gt;setfacl&lt;/code&gt;/extra permissions on files&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="programming"></category><category term="RC"></category></entry><entry><title>RC Day 1!</title><link href="/posts/rc-day-1.html" rel="alternate"></link><published>2021-01-04T00:00:00-05:00</published><updated>2021-01-04T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2021-01-04:/posts/rc-day-1.html</id><summary type="html">&lt;p&gt;I've set a goal to reflect on each day at the Recurse Center; not all those reflections will be public, but those related to what I'm working on will be. The day started a bit earlier than I've been used to, and I enjoyed the orientation activities for the most …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've set a goal to reflect on each day at the Recurse Center; not all those reflections will be public, but those related to what I'm working on will be. The day started a bit earlier than I've been used to, and I enjoyed the orientation activities for the most part, although I wasn't entirely sure the format served the content well, particularly the social rules skit. It's quite hard to get real engagement and buy-in over Zoom. I met several new and returning RCers who are interested in Python and/or data science, including one R aficionado, and got encouragement to do a visualization of global cost of living, using the cost of a pint of beer as a metric. Of course it's been done before and finding/scraping the data won't be easy, but it does sound like a tractable project.&lt;/p&gt;
&lt;p&gt;I also put out an enquiry about web fonts, to get a san check on one of my more esoteric project ideas: a font with glyphs that vary based on the date/time. For example, O could reflect the phase of the moon, T could be a seasonal tree (bonus points for N/S Hemisphere seasonality), line thickness could vary through the hour, etc. Obviously this would be more in the vein of an art project than a useable font but I think it would be interesting (and have some niche uses - mostly witchy ones.) So far, no typography nerds have revealed themselves.&lt;/p&gt;
&lt;p&gt;Another idea I had was based on this &lt;a href="https://www.asimovinstitute.org/neural-network-zoo/"&gt;Neural Network Zoo&lt;/a&gt; chart, implementing or at least rounding up examples / applications for each one. Perhaps this is more of a study guide than a project. And some of these networks look quite complex or specialized.&lt;/p&gt;
&lt;p&gt;I have made good progress through the Coursera DL with TensorFlow specialization, though: 2 courses down, started the 3rd today. So far we've covered basic neural nets and image processing with convolutions, and next is text processing. I've also finished the 7 extant chapters of &lt;a href="https://www.manning.com/books/deep-learning-with-python-second-edition"&gt;DL with Python&lt;/a&gt;, 2nd ed. I should probably review the 1st ed. for material that hasn't been updated yet. I tackled the 1st chapter of &lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python"&gt;MLDP&lt;/a&gt;, which promises to cover quite a bit: map/reduce, parallel computinng, distributed computing, Spark, Hadoop, and AWS.&lt;/p&gt;
&lt;p&gt;What I didn't do today was write any code, except a few lines for Coursera. I've also been stalled for a week on the first case study of &lt;a href="https://www.manning.com/books/data-science-bookcamp"&gt;DS BookCamp&lt;/a&gt; - although I gave a go at implementing my own solutions, I didn't expect my code to take several hours to run and assumed I was doing something wrong. Perhaps reader feedback will encourage the author to drop more breadcrumbs in the final edition. Nor did I get a chance to pair or connect with anyone outside of orientation, probably because I spent half the day with no visible avatar in the space. Turns out it's hard to get to know ghosts!&lt;/p&gt;
&lt;p&gt;Tomorrow I plan to continue with Coursera and show up for MLDP group; try scheduling some time with a faculty member to narrow down my ideas into a workable project or 3; and attend the pairing workshop before trying it out.&lt;/p&gt;</content><category term="posts"></category><category term="RC"></category><category term="programming"></category></entry><entry><title>sorting and planning</title><link href="/posts/sorting-and-planning.html" rel="alternate"></link><published>2020-12-23T00:00:00-05:00</published><updated>2020-12-23T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-12-23:/posts/sorting-and-planning.html</id><summary type="html">&lt;p&gt;This week, I've been gearing up for my batch at the Recurse Center, prompted by a flurry of facilitator emails. I've joined Zulip and indicated my interest in a reading/project group for &lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python"&gt;Mastering Large Datasets with Python&lt;/a&gt;; posted my introduction to the Welcome thread and read about who else …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week, I've been gearing up for my batch at the Recurse Center, prompted by a flurry of facilitator emails. I've joined Zulip and indicated my interest in a reading/project group for &lt;a href="https://www.manning.com/books/mastering-large-datasets-with-python"&gt;Mastering Large Datasets with Python&lt;/a&gt;; posted my introduction to the Welcome thread and read about who else will be joining me; and connected with my onboarding buddy, a current RC attendee who can help me out during my first week. I'm a bit uncertain about strategies for scheduling my time - how many books can I read / study groups can I join, anyway?&lt;/p&gt;
&lt;p&gt;I'm also clearing the decks by closing / bookmarking tabs that have accumulated, sorting them into browser windows and desktops, etc. It's always an interesting look at what's caught my eye in the last several months. I definitely have too many resources I'm trying to work with. For example, I've been reading François Chollet's &lt;a href="https://www.manning.com/books/deep-learning-with-python-second-edition"&gt;Deep Learning with Python&lt;/a&gt;, on a rec from a friend, and it's slowly occurring to me that DL might be overly advanced for where I am in my data science journey. This sentiment is reinforced by having signed up for the NY Dept. of Labor's &lt;a href="https://dol.ny.gov/online-learning-coursera"&gt;free Coursera program&lt;/a&gt;, which means I can now pursue a DeepLearning.AI TensorFlow Developer Certificate at no cost except my time (and the exam fee). I'm going to give it a go, again, picking up where I left off in the spring. I also have Allan Downey's &lt;a href="https://greenteapress.com/wp/think-stats-2e/"&gt;Think Stats&lt;/a&gt; and &lt;a href="https://greenteapress.com/wp/think-bayes/"&gt;Think Bayes&lt;/a&gt;, Skiena's &lt;a href="https://www.springer.com/us/book/9783319554433"&gt;Data Science Design Manual&lt;/a&gt;, and a pile of other, even more academic, tomes. (I'm a bit of a packrat when it comes to digital resources, I'm afraid!) Obviously I'm not planning to go through every one of them in depth, but hopefully I can find something that hits the right tone and level of assumed expertise for me.&lt;/p&gt;</content><category term="posts"></category><category term="RC"></category><category term="personal"></category></entry><entry><title>Advent of Code 2020, in JavaScript</title><link href="/posts/advent-of-code-2020-in-javascript.html" rel="alternate"></link><published>2020-12-09T00:00:00-05:00</published><updated>2020-12-09T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-12-09:/posts/advent-of-code-2020-in-javascript.html</id><summary type="html">&lt;p&gt;I’m doing Advent of Code this year using JavaScript, with the goal of forcing myself to learn the ins and outs of the language. And boy, does it have a lot of those. Here are some reflections on traps and quirks I’ve discovered.&lt;/p&gt;
&lt;p&gt;Initially I wrote JS literally …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m doing Advent of Code this year using JavaScript, with the goal of forcing myself to learn the ins and outs of the language. And boy, does it have a lot of those. Here are some reflections on traps and quirks I’ve discovered.&lt;/p&gt;
&lt;p&gt;Initially I wrote JS literally as I would Python, but with JS syntax: parens around conditions, curly braces instead of colons, semicolons at the end of statements. I quickly realized that the equivalent of Python’s &lt;code&gt;for x in y&lt;/code&gt; statement is not JS’s &lt;code&gt;for (x in y)&lt;/code&gt;, but &lt;code&gt;for (x of y)&lt;/code&gt;. The first produces indices of the array, sort of like Python’s &lt;code&gt;enumerate&lt;/code&gt;, while the second produces elements of the array, which is usually what I want. When I did eventually want &lt;code&gt;for (x in y)&lt;/code&gt;, I found a second quirk: those indices may be integers that I can use as &lt;code&gt;Array[i]&lt;/code&gt;, but that doesn’t mean I can add them to other numbers! Adding 1 to the indices produced &lt;code&gt;01, 11, 21, 31&lt;/code&gt; instead of &lt;code&gt;1, 2, 3, 4&lt;/code&gt;, suggesting that the indices are some Number/String hybrid.&lt;/p&gt;
&lt;p&gt;Explicit casting to &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; isn’t so bad, but declaring variables is very strange. Part of the issue is that (again, like I would in Python) I want to use Jupyter Notebooks as my development environment. They’re an easy way to re-run code against different inputs and zero in on sections as I debug, instead of running the whole file every time. I am keeping finished solutions in a &lt;a href="https://github.com/christalee/AoC/blob/master/aoc_2020_code.js"&gt;regular JS file&lt;/a&gt; and I have opened it up in the Node REPL (&lt;code&gt;node -i&lt;/code&gt;) to check that they give the right answer, but it’s such a pain to load in code and run it, I wouldn’t want to do that all the time. Luckily, I found &lt;a href="https://github.com/n-riesco/ijavascript"&gt;IJavaScript&lt;/a&gt; and it works fine.&lt;/p&gt;
&lt;p&gt;However, I quickly found that declaring variables with &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; prevents me from re-running a cell, because you can’t re-declare a variable. To avoid having to restart the kernel every time I want to re-run things, I started leaving off &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;. That’s how I discovered that variables declared without keywords are global. I managed to define a variable in one branch of an &lt;code&gt;if&lt;/code&gt; statement, but use it in both, which worked sporadically, depending on whether I had previously followed the branch where it was defined or not. Otherwise, it silently failed, returning an empty list. I don’t have a good sense yet of when to expect errors, return values, etc. in JS, but I was not expecting that level of dysfunction. JS frequently tells me when something is undefined, why not in an &lt;code&gt;else&lt;/code&gt; branch?&lt;/p&gt;
&lt;p&gt;So now I put in as many &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; statements as I can, and put up with restarting the kernel perpetually. It takes away from some of the convenience, for sure. I also noticed that &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; variables are block-scoped, which means I have to declare them outside a block if I want them to be available later on. I’m pretty sure variables in Python blocks are function-scoped… as are JavaScript &lt;code&gt;var&lt;/code&gt; declarations. Apparently this is one reason not to use &lt;code&gt;var&lt;/code&gt; anymore. Regardless, it was a surprise, but I’ve accepted it as part of the general fashion for declaring variables upfront. Thank goodness for iterable unpacking, which works for assignments in Python and JavaScript (&lt;code&gt;[a, b] = [1, 2]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;My favorite JavaScript shocker, and the one I find least defensible, came when I wanted to sort an array. I’m trying not to get too bent out of shape at the lack of built-in functions for common operations: &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, etc. But &lt;code&gt;[40, 50, 100, 200].sort()&lt;/code&gt; should not yield &lt;code&gt;[ 100, 200, 40, 50 ]&lt;/code&gt;. Why would you sort non-Strings as if they’re Strings? :head_explodes: It turns out you can specify a sort algorithm, which I’ve done sometimes in Python but for more advanced stuff, like “sort on the value of key x”. While I’m griping, I’ll also say that I don’t entirely understand why empty lists sneak in at the end of data I’m loading from file, or why a random &lt;code&gt;undefined&lt;/code&gt; showed up as the first element of the first list in a list of 300+ lists. Not the rest, just that one.&lt;/p&gt;
&lt;p&gt;So I’ve learned to be extra careful in checking my inputs manually but given the inconsistent warning about undefined variables, this is probably going to keep tripping me up and I’m just going to have to roll with it. Or abandon the effort - a couple of days ago I was not entirely sure it was worth learning JS to this degree. But I’d like to feel more comfortable with JS, or at least, some language other than Python. My partner suggested that I’m feeling all the pain of JS without the benefit of the nice graphical stuff it typically enables, and I get that, but adding in more complexity / figuring out a development environment that includes the browser is beyond me right now.&lt;/p&gt;
&lt;p&gt;If you’re doing Advent of Code, good luck and have fun! I’m trying to keep up with every day, working in JavaScript; for the first 5 days I allowed myself to switch to Python if I was stuck as long as I ultimately implemented a solution in JS, and also I was doing that day’s puzzles from 2017 in Python as a bonus challenge. But now that I’m working all in JS I don’t really have the energy to do more. Whatever language you’re using, whatever challenge you’ve set for yourself, I hope you find something surprising and wonderful!&lt;/p&gt;
&lt;p&gt;Cheatsheet (JavaScript analogues to Python structures I use frequently):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map() -&amp;gt; dict()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map.get(x) -&amp;gt; dict[x]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map.set(x, y) -&amp;gt; dict[x] = y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map.entries() -&amp;gt; dict.items()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array() -&amp;gt; list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.slice(start, stop) -&amp;gt; list[start:stop]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.push(x) -&amp;gt; list.append(x)&lt;/code&gt; (which is different from &lt;code&gt;list.extend(x)&lt;/code&gt; or &lt;code&gt;list += x&lt;/code&gt;!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.sort((a, b) =&amp;gt; a - b) -&amp;gt; sorted(list)&lt;/code&gt; (or &lt;code&gt;list.sort()&lt;/code&gt; for in-place)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.replace(/old/g, new) -&amp;gt; str.replace(old, new)&lt;/code&gt; (is that &lt;code&gt;sed&lt;/code&gt; regex syntax?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (x of y) -&amp;gt; for x in y:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (x in y) -&amp;gt; for i, x in enumerate(y):&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if (f.includes(x)) -&amp;gt; if x in f:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;, ||, ! -&amp;gt; and, or, not&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="programming"></category><category term="javascript"></category></entry><entry><title>Denim Duvet</title><link href="/posts/denim-duvet.html" rel="alternate"></link><published>2020-12-07T00:00:00-05:00</published><updated>2020-12-07T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-12-07:/posts/denim-duvet.html</id><summary type="html">&lt;p&gt;Over the years, I've gone through a lot of jeans. Usually I retire them for excessive rips and holes, although my standards have risen steadily. During the 2020 winter holiday, my partner and I decided to make significant progress on turning this pile of jeans into a duvet cover. This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the years, I've gone through a lot of jeans. Usually I retire them for excessive rips and holes, although my standards have risen steadily. During the 2020 winter holiday, my partner and I decided to make significant progress on turning this pile of jeans into a duvet cover. This required prepping the jeans by cutting off each leg and trimming them into panels 7" wide, roughly sorting them by color, then sewing them into a spiral with 1/4" seam allowances. The last seams were &amp;gt; 6' long!&lt;/p&gt;
&lt;p&gt;Next steps on this project are to learn to use our buttonholing foot, make buttonholes in the denim, attach the bottom layer, and add buttons to finish it off. We look forward to having a second duvet cover to alternate with our current one, which is mostly white and shows cat hair entirely too well.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/denim-duvet-2.jpg" /&gt;
&lt;figcaption class="small"&gt;The beginnings of the spiral&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="posts"></category><category term="hobbies"></category><category term="making"></category><category term="portfolio"></category></entry><entry><title>Recurse Center, incoming!</title><link href="/posts/recurse-center-incoming.html" rel="alternate"></link><published>2020-11-13T00:00:00-05:00</published><updated>2020-11-13T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-11-13:/posts/recurse-center-incoming.html</id><summary type="html">&lt;p&gt;I'm honored and excited to join the January 2021 batch of the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, a unique community of programmers focused on self-directed learning. Although their Brooklyn space is closed for the foreseeable future, they've put an impressive amount of effort into facilitating productivity and communication with &lt;a href="https://www.recurse.com/virtual-rc"&gt;Virtual RC&lt;/a&gt;, leaning heavily …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm honored and excited to join the January 2021 batch of the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, a unique community of programmers focused on self-directed learning. Although their Brooklyn space is closed for the foreseeable future, they've put an impressive amount of effort into facilitating productivity and communication with &lt;a href="https://www.recurse.com/virtual-rc"&gt;Virtual RC&lt;/a&gt;, leaning heavily on Zoom and &lt;a href="https://zulip.com/"&gt;Zulip&lt;/a&gt;, a Slack analogue. So far I've taken a look at their calendar, which is hopping with cool activities; set up a chat with an alum who studied the same topics I'm considering; signed up for some mailing lists and joined the Github team; and started writing up some learning goals and gathering resources. I also anticipate wanting to blog and show off whatever I accomplish, so I spent the last couple of weeks building and populating this website. It already contains quite a bit more content than my previous site, based on Hakyll; for more details on how I did it, check out the &lt;a href="/pages/colophon.html"&gt;colophon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But what will I do at the Recurse Center? Ideally, become a better programmer. Specifically, one who can get hired to do data science/engineering. RC is funded primarily by companies who recruit their alumni, essentially paying a referral bonus. I'll be spending my time filling in gaps in my statistics and SQL knowledge, gaining fluency in the standard techniques for language processing, machine learning, and deep learning, making visualizations of my results, and perhaps contributing to an open source project. At least, that's part of the plan. I'm also keeping some mental spacetime open for serendipitous encounters with other Recursers, who are typically a fascinating bunch, and my own experiments. I hope I can find some knowledge to share; unfortunately most of my non-programming hobbies don't translate so well to virtual space. I'll be blogging about my learning here and adding projects as they're ready for review.&lt;/p&gt;
&lt;p&gt;Taking a step into the unknown is a bit scary, but I'm putting effort into planning the structure and support I'll need to be successful at Recurse. Tune in in the new year to see how it goes!&lt;/p&gt;</content><category term="posts"></category><category term="RC"></category><category term="personal"></category></entry><entry><title>my first pull request</title><link href="/posts/my-first-pull-request.html" rel="alternate"></link><published>2020-11-01T00:00:00-04:00</published><updated>2020-11-01T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-11-01:/posts/my-first-pull-request.html</id><summary type="html">&lt;p&gt;Someone linked me to &lt;a href="https://computecuter.com/"&gt;Compute Cuter&lt;/a&gt;, a set of suggestions for cuter text editor themes, fonts, even keyboards and keycaps. The site is by &lt;a href="https://twitter.com/sailorhg"&gt;sailorhg&lt;/a&gt;, who makes the &lt;a href="https://sailorhg.github.io/fairyfloss/"&gt;fairyfloss&lt;/a&gt; theme I sometimes use. Looking through the suggestions, I was rather taken with the &lt;a href="https://witchhazel.thea.codes/"&gt;Witch Hazel&lt;/a&gt; theme, but it didn't have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Someone linked me to &lt;a href="https://computecuter.com/"&gt;Compute Cuter&lt;/a&gt;, a set of suggestions for cuter text editor themes, fonts, even keyboards and keycaps. The site is by &lt;a href="https://twitter.com/sailorhg"&gt;sailorhg&lt;/a&gt;, who makes the &lt;a href="https://sailorhg.github.io/fairyfloss/"&gt;fairyfloss&lt;/a&gt; theme I sometimes use. Looking through the suggestions, I was rather taken with the &lt;a href="https://witchhazel.thea.codes/"&gt;Witch Hazel&lt;/a&gt; theme, but it didn't have an install option for Atom, my text editor of choice. Digging through &lt;a href="https://flight-manual.atom.io/hacking-atom/sections/converting-from-textmate/#convert-the-theme"&gt;the documentation&lt;/a&gt;, though, I found out that Atom ships with a way to convert Sublime/TextMate theme bundles to Atom themes.&lt;/p&gt;
&lt;p&gt;I contacted &lt;a href="https://thea.codes/"&gt;Thea Flowers&lt;/a&gt;, the designer of Witch Hazel, about adding the Atom instructions to the landing page, and she invited me to make a pull request. I figured out that I had to fork her repo, make my changes, and then make a pull request between the correct branches. I also needed to turn off linting in my editor to avoid a bunch of unwanted whitespace diffs - I was really only adding about 10 lines of text. I made my request and the next day, it was accepted, easy as pie. Thanks, Thea!&lt;/p&gt;
&lt;p&gt;I also want to shoutout Jany Belluz, maker of &lt;a href="https://github.com/belluzj/fantasque-sans"&gt;Fantasque Sans Mono&lt;/a&gt;, my new favorite Terminal font.&lt;/p&gt;</content><category term="posts"></category><category term="programming"></category></entry><entry><title>Embroidery</title><link href="/posts/embroidery.html" rel="alternate"></link><published>2020-09-07T00:00:00-04:00</published><updated>2020-09-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2020-09-07:/posts/embroidery.html</id><summary type="html">&lt;figure class="figure-img"&gt;
&lt;img src="/images/stitch-flw-1.jpg" /&gt;
&lt;figcaption class="small"&gt;Part of a Wright stained glass windows&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As a child, I learned to cross-stitch. As an adult, I've returned to it as a relatively quiet, clean, soothing hobby I can pick up at idle moments that nevertheless produces something lasting and beautiful. Projects I've been working on include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A rendering …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;figure class="figure-img"&gt;
&lt;img src="/images/stitch-flw-1.jpg" /&gt;
&lt;figcaption class="small"&gt;Part of a Wright stained glass windows&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;As a child, I learned to cross-stitch. As an adult, I've returned to it as a relatively quiet, clean, soothing hobby I can pick up at idle moments that nevertheless produces something lasting and beautiful. Projects I've been working on include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A rendering of one of Frank Lloyd Wright's windows, now in the &lt;a href="https://www.metmuseum.org/art/collection/search/9823"&gt;Metropolitan Museum of Art&lt;/a&gt;. I've &lt;a href="https://docs.google.com/spreadsheets/d/1DW2hBkbjTFB2UOoZqyk4ieI-YpwfAcXPPxVUCJY0F2U/edit?usp=sharing"&gt;charted them out&lt;/a&gt; myself, since I didn't realize the patterns were available commercially when I started this project. When I've completed the triptych, I plan to mount them in a float frame or similar so they can be placed in the window, giving an effect similar to the originals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inspired by &lt;a href="https://www.metmuseum.org/art/collection/search/14986"&gt;another FLW design&lt;/a&gt; in the Met's collection, I've charted but not yet started a project using conductive thread to highlight the PCB-esque design of the print. I haven't finished designing the circuit but I anticipate the visible components will include a battery, switch, and several LEDs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/stitch-sampler.jpg" /&gt;
&lt;figcaption class="small"&gt;A bouquet of embroidery stitches&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In an effort to learn non-cross-stitch embroidery, I stitched this floral sampler, which uses different stitches for each component of the design. I chose the colors from the cache of thread I inherited from my mother, and cut some linen from an old shirt to practice on. It was fun and the result is quite pretty, but working on linen is somewhat tricky.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My current project is based on a large design of the 4 seasons, using only the border elements: &lt;a href="/images/stitch-spring.jpg"&gt;tulips&lt;/a&gt; and apple blossoms for spring, &lt;a href="/images/stitch-summer.jpg"&gt;seashells and hollyhocks&lt;/a&gt; for summer, red leaves for autumn, and snowflakes and evergreens for winter. The center will hold "A love for all seasons" and the names of the recipients. I'm starting with a draft stitching to check that my colors are close enough to what's specified, otherwise I will need to buy some thread. It's an ambitious project but when I spend an hour a day, it progresses satisfactorily.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="hobbies"></category><category term="making"></category></entry><entry><title>Family Cookbook</title><link href="/posts/family-cookbook.html" rel="alternate"></link><published>2019-12-07T00:00:00-05:00</published><updated>2019-12-07T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2019-12-07:/posts/family-cookbook.html</id><summary type="html">&lt;p&gt;My extended family likes to cook, especially at the holidays, and frequently I hear, “What’s the recipe for X? Ask Y, they’ll know.” And then the recipe will be dredged up from memory, or a dusty cookbook, or someone’s text history, or photos of a dusty cookbook …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My extended family likes to cook, especially at the holidays, and frequently I hear, “What’s the recipe for X? Ask Y, they’ll know.” And then the recipe will be dredged up from memory, or a dusty cookbook, or someone’s text history, or photos of a dusty cookbook from someone’s text history. Fed up with this precarious system, I decided to create a family cookbook, collecting recipes and menus from holiday feasts, ragged binders of handwritten recipes, and even punchcards tucked into my parents’ first Joy of Cooking (now mine). I made some tweaks to the LaTeX &lt;a href="https://ctan.org/pkg/cuisine?lang=en"&gt;cuisine&lt;/a&gt; package, primarily to move the recipe step numbers next to the steps, and used it for a first draft of the &lt;a href="https://github.com/christalee/recipes/blob/master/tex/cookbook.pdf"&gt;cookbook&lt;/a&gt;. I anticipate adding more content in the future; if you would like to make your own cookbook with this template, check out my &lt;a href="https://github.com/christalee/recipes/blob/master/tex/cb_recipe.sty"&gt;style file&lt;/a&gt; and/or modified &lt;a href="https://github.com/christalee/recipes/blob/master/tex/cb_cuisine.sty"&gt;cuisine.sty&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="hobbies"></category><category term="programming"></category><category term="publishing"></category></entry><entry><title>High Holy Days Music</title><link href="/posts/high-holy-days-music.html" rel="alternate"></link><published>2019-09-07T00:00:00-04:00</published><updated>2019-09-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2019-09-07:/posts/high-holy-days-music.html</id><summary type="html">&lt;p&gt;I sing with the &lt;a href="https://brooklyncommunitychorus.org/"&gt;Brooklyn Community Chorus&lt;/a&gt; and we sometimes hold our concerts at &lt;a href="https://cbebk.org/"&gt;Congregation Beth Elohim&lt;/a&gt; in Park Slope. In return, CBE invites us to provide backup vocals during their High Holy Days services. I participated in 2019 and was pleased to receive a binder full of music, some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I sing with the &lt;a href="https://brooklyncommunitychorus.org/"&gt;Brooklyn Community Chorus&lt;/a&gt; and we sometimes hold our concerts at &lt;a href="https://cbebk.org/"&gt;Congregation Beth Elohim&lt;/a&gt; in Park Slope. In return, CBE invites us to provide backup vocals during their High Holy Days services. I participated in 2019 and was pleased to receive a binder full of music, some of which was handwritten, heavily annotated, or used a different melody in rehearsal. To produce sheet music from these pages, I turned to &lt;a href="http://lilypond.org/"&gt;Lilypond&lt;/a&gt;, a text-based music editor. In a few weeks I’d taught myself enough to transcribe 15 pages of music. The source files and PDF output are available &lt;a href="https://github.com/christalee/hhd-music"&gt;on Github&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="hobbies"></category><category term="programming"></category><category term="publishing"></category></entry><entry><title>Buffer the Slayer</title><link href="/posts/buffer-the-slayer.html" rel="alternate"></link><published>2019-04-07T00:00:00-04:00</published><updated>2019-04-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2019-04-07:/posts/buffer-the-slayer.html</id><summary type="html">&lt;p&gt;When I was teaching programming at the &lt;a href="https://www.workshopschool.org/"&gt;Workshop School&lt;/a&gt;, I eventually expected my students to learn about object-oriented programming (OOP). As it’s not a paradigm I use frequently, I wanted to refresh my memory, both about OOP and about how to teach it. So I dug up a project …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was teaching programming at the &lt;a href="https://www.workshopschool.org/"&gt;Workshop School&lt;/a&gt;, I eventually expected my students to learn about object-oriented programming (OOP). As it’s not a paradigm I use frequently, I wanted to refresh my memory, both about OOP and about how to teach it. So I dug up a project from my own student days: a text adventure game featuring Buffer the Vampire Slayer. We were given a basic object system for locations and NPCs, and asked to implement magic objects, secret locations, and our own creative game ideas. The project was re-themed shortly afterward to feature Hairy Cdr and the Chamber of Stata, but otherwise is well described on &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/projects/st05project4.pdf"&gt;MIT OpenCourseWare&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately this project was written in &lt;a href="https://groups.csail.mit.edu/mac/projects/scheme/"&gt;Scheme&lt;/a&gt;, a LISP variant, not a language I was teaching at the time. So I decided to rewrite it in Python, and re-teach myself about objects at the same time. After the initial, fairly literal, translation, I added a test suite to prevent regression while refactoring. Currently, the game is playable but perhaps not very fun; it lacks a win condition, for one thing. I imagine I'll add that next. In the meantime, you can check it out &lt;a href="https://github.com/christalee/buffer-adventure"&gt;on Github&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Cat Assistant</title><link href="/posts/cat-assistant.html" rel="alternate"></link><published>2017-10-30T00:00:00-04:00</published><updated>2017-10-30T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-10-30:/posts/cat-assistant.html</id><summary type="html">&lt;p&gt;Inspired by the hilarious interview question, "What words would your family use to describe you?"&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by the hilarious interview question, "What words would your family use to describe you?"&lt;/p&gt;
&lt;p&gt;My cats would describe me as warm and dedicated to their welfare, although they have concerns about my emergency response times.&lt;/p&gt;
&lt;p&gt;My senior cat reports high levels of satisfaction with his automatic food delivery service, which boasts 24/7 uptime and limits access to authorized users. Prior to this, feeding the cat involved manual operation of the food container, requiring round-the-clock staffing. I researched and implemented this solution after consulting with major stakeholders, including my partner and my sleep schedule.&lt;/p&gt;
&lt;p&gt;My junior cat has ongoing concerns about my commitment to user satisfaction, given my frequent attempts to rub her tummy and shoo her off the counter, but concedes that I fulfill my role of Second-Best Human adequately.&lt;/p&gt;</content><category term="posts"></category><category term="interviewing"></category><category term="jokes"></category></entry><entry><title>A Tale of 2 PDs</title><link href="/posts/a-tale-of-2-pds.html" rel="alternate"></link><published>2017-10-20T00:00:00-04:00</published><updated>2017-10-20T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-10-20:/posts/a-tale-of-2-pds.html</id><summary type="html">&lt;p&gt;Recently I attended two professional development events nominally aimed at "maker educators." They ended up being pretty different experiences, though!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I attended two professional development events nominally aimed at "maker educators." They ended up being pretty different experiences, though!&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;One event was held at a university, lead by a faculty member who (with colleagues) has developed well-known tools and pedagogy for the pursuit of creative technology. Like most PD for teachers, it was structured as a lecture with projected visuals and some live-demos. Since only half a dozen were in attendance, we did have some chances to bring our own experiences and questions to the group, but this was insufficient critical mass to really get a discussion going.&lt;/p&gt;
&lt;p&gt;The other event was held online, organized by researchers at another respected university program focused on learning with technology. I had signed up only a few hours before, so I didn't realize the team was using an unconference format. I tossed an idea into the nomination pool on a whim, hoping to spark some conversation at a more abstract level than swapping standards-aligned lesson plans. (Nothing against lesson plans, but it's not why I came!)&lt;/p&gt;
&lt;p&gt;Surprisingly, my session proposal quickly got traction, mostly due to a catchy title. When the voting was over, I found myself chatting with half a dozen educators about challenges they've faced getting maker programs off the ground in their schools. Several others popped into the chat over the next 45 minutes, although technology issues made it tough to promptly invite them to speak. We used an Etherpad to summarize the discussion and collect resource recommendations.&lt;/p&gt;
&lt;p&gt;I did my best to facilitate the discussion, which did not go in the direction I had in mind when I proposed it. But that's the double-edged nature of unconferences - you never know which perspectives are coming to the table. I enjoyed it, although I wasn't expecting to talk so much - that was a bit stressful. Next time I'll come prepared! And I would've liked to pop into other sessions that sounded interesting; luckily the organizers sent out all the session notes afterwards. The event attracted ~50 attendees, many of whom seemed to already know each other, but we all introduced ourselves in chat and had a channel to swap contact info.&lt;/p&gt;
&lt;p&gt;I love observing educators in the student/audience role - do they react the way their students would? What are the goals of the organizers? attendees? How are those goals served by the format of the event? Was the event as-advertised, or did it go another way?&lt;/p&gt;
&lt;p&gt;Teacher PD is often organized in a fairly traditional lecture/slides format - odd, when so many educators have moved away from that model in their own classrooms. The outcome is relatively predictable, though, compared to an event that depends on everyone's participation. Do you have thoughts on what makes a PD session more or less effective? Have you attended an unconference, or presented at a conference session? Would you rather do all your PD online, or is the networking/facetime important to you?&lt;/p&gt;</content><category term="posts"></category><category term="making"></category><category term="programming"></category><category term="education"></category></entry><entry><title>Introduction to Programming</title><link href="/posts/introduction-to-programming.html" rel="alternate"></link><published>2017-07-17T00:00:00-04:00</published><updated>2017-07-17T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-07-17:/posts/introduction-to-programming.html</id><summary type="html">&lt;p&gt;Colleagues often consult me for advice on teaching programming as fledgling or non-programmers. Here are capsule reviews of various tools and approaches for beginners.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Colleagues often consult me for advice on teaching programming as fledgling or non-programmers. Here are capsule reviews of various tools and approaches for beginners.&lt;/p&gt;
&lt;h3&gt;Philosophy&lt;/h3&gt;
&lt;p&gt;When picking a platform/curriculum for programming, I focus on these criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how familiar or easy to learn it is for the instructor&lt;/li&gt;
&lt;li&gt;how aligned it is to pre-existing student interests (games, fan/professional/personal webpage, mobile app, robots - all popular)&lt;/li&gt;
&lt;li&gt;whether you want to teach programming in a job context ('learn to make a webpage'), or as a medium for student work on other topics ('use Twine/Scratch to tell a story about...')&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My colleagues teach with 1:1 Chromebooks, so they need tools that keep student work in the browser (look out for older tools that use Flash). You know your students best - how well do they type? proofread? read directions (vs. video or interactive hints)? If they are aiming at careers in programming (or other STEM), definitely plan opportunities for "real coding"; but if not, it may be more frustrating than rewarding.&lt;/p&gt;
&lt;p&gt;If you want a crash course in CS pedagogy, "computational thinking" is the keyword, but it isn't necessary unless you're looking for some organizing principles/vocabulary.&lt;/p&gt;
&lt;!-- (I wrote more about computational thinking here.) --&gt;

&lt;h3&gt;Stuff I've Done&lt;/h3&gt;
&lt;p&gt;To give you a concrete idea of where I'm coming from, here are CS activities I taught or facilitated with colleagues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic programming in &lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;, up through loops and variables (8 weeks)&lt;/li&gt;
&lt;li&gt;basic HTML/CSS -&amp;gt; build a webpage in &lt;a href="https://www.weebly.com/"&gt;Weebly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;students building Android apps in &lt;a href="http://appinventor.mit.edu/explore/"&gt;App Inventor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;students exploring game dev with &lt;a href="https://unity3d.com/"&gt;Unity 3D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;student writing a Python app to display assignment due dates in the classroom, based on the teacher's updated Google Calendar (using OAuth &amp;amp; RasPi)&lt;/li&gt;
&lt;li&gt;students exploring basic programming with &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;, &lt;a href="https://code.org/"&gt;Code.org&lt;/a&gt;, and &lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;"dissecting" a broken iMac &amp;amp; other electronics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Making a Webpage&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://thimble.mozilla.org/en-US/"&gt;Mozilla Thimble&lt;/a&gt; is the most friendly &lt;a href="https://github.com/mozilla/thimble.mozilla.org/wiki/Using-Thimble-FAQ"&gt;webpage editor/remixer&lt;/a&gt; I know of. You can write your template "from scratch" and include directions as a tutorial, then publish and send the link to students to remix. Downsides: students might have to make an account; everything will be licensed attribution-only, so this isn't a good platform if students want to use lots of other people's copyrighted photos, etc. (If it's all their own writing and images, or they get permission &amp;amp; give credit, great!)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.weebly.com/"&gt;Weebly&lt;/a&gt; is also popular. Its main mode is drag-and-drop, though you might be able to dig into themes and options to work with the raw HTML.&lt;/p&gt;
&lt;p&gt;I haven't used &lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; specifically, but it looks like a decent online web dev editor. You would have to find or write lessons.&lt;/p&gt;
&lt;p&gt;The easiest and cheapest option for hosting might be to keep webpages and assets in a public Google Drive folder. If you create in Thimble, you can download instead of publishing; if you'd rather use a different editor, Caret is good, and can save directly to Drive on Chromebooks. If this is meant to be a homepage students can use and update in the future, having it in their Google Drive sounds better than on another site/account they will forget about once the project is over.&lt;/p&gt;
&lt;h3&gt;Graphics, Animations&lt;/h3&gt;
&lt;p&gt;For students new to coding who might not be sure what aspects of programming appeal to them most, I tend to go with Scratch; the floor is low, the community/knowledge base is very robust, and since you can define variables and functions, the ceiling is pretty high. It's the simplest way to get interactive/animated graphics and music, which many students consider important to making games. And students familiar with the block environment can move on to Android apps with App Inventor.&lt;/p&gt;
&lt;p&gt;For reference, here is a set of Scratch activities I used in a &lt;a href="https://drive.google.com/drive/folders/0BxkPVQhGc8zXREhxYVJfbTh5aEk?usp=sharing"&gt;freshmen programming elective&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've been interested in Twine but haven't used it with students. My plan was always to focus on storytelling, with the HTML/CSS being enrichment. If you decide to go with Twine, I am super curious to hear how it goes!&lt;/p&gt;
&lt;h3&gt;Other Popular Tools&lt;/h3&gt;
&lt;p&gt;I've only used Code.org's classic &lt;a href="https://studio.code.org/hoc/1"&gt;Hour of Code&lt;/a&gt; as a Day 1/Week 1 intro to block programming. I see tutorials there from other familiar resources:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt; - scaffolded tutorials on many subjects for a general adult audience; not good for students who don't read or process directions well&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.khanacademy.org/computing/computer-programming"&gt;Khan Academy&lt;/a&gt; - not as polished as CodeCademy or Code.org, but if you use Khan for other topics, maybe stick with it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt; - Python or Javascript, framed as a hero quest RPG; silly, but ok for self-study&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blockly.games/"&gt;Blockly Games&lt;/a&gt; - a self-contained online curriculum with a ramp from blocks to text editor, maybe short on guidance for self-study but should be fine in the classroom&lt;/p&gt;</content><category term="posts"></category><category term="computer science"></category><category term="programming"></category><category term="education"></category></entry><entry><title>CTE Programming in 2017</title><link href="/posts/cte-programming-in-2017.html" rel="alternate"></link><published>2017-06-23T00:00:00-04:00</published><updated>2017-06-23T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-06-23:/posts/cte-programming-in-2017.html</id><summary type="html">&lt;p&gt;Anyone teaching computer-related topics in 2017 knows that: the range of skills, compensation levels, and working conditions in "tech" is huge and unpredictable; and, trying to future-proof your students is impossible.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I spoke with someone newly hired to teach programming/web development at a career &amp;amp; technical education (CTE, aka vocational) high school. CTE programs vary in length and duration, but the ones I'm familiar with typically require 1080 hours of technical instruction over 3 years (alongside classes to fulfill non-CTE graduation requirements.) This response is based on what I've observed about friends working in software engineer, sysadmin, and web developer roles, with and without CS bachelor's degrees; close friends participating in or leading hiring for programming jobs; and my own observations of what job ads ask for and what those jobs actually entail. (New to teaching CS? Try my &lt;a href="/posts/introduction-to-programming.html"&gt;Introduction to Programming&lt;/a&gt; for a broader look at creative &amp;amp; constructivist teaching resources.)&lt;/p&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Anyone teaching computer-related topics in 2017 knows that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The range of skills, compensation levels, and working conditions in "tech" is huge and unpredictable.&lt;/li&gt;
&lt;li&gt;Trying to future-proof your students is impossible.&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;
&lt;p&gt;Depending on their college/career goals, you need to strike a balance between exposing them to transferable but abstract concepts vs. fostering mastery of specific tools. Students should leave your program showing mastery in at least one cluster of skills, to build their confidence and ensure that they know how to learn beyond the beginner level.&lt;/p&gt;
&lt;p&gt;One challenge is to contextualize and connect different computer-related roles and careers. Ideally students get a taste of multiple fields but end up clear that different job titles/paths go with different daily activities, salaries, business sectors, and educational requirements. An Oracle DBA leads a different life than an iOS designer or an embedded systems engineer. Keeping an eye on the job market is essential input for your curriculum. Internships, field trips, and career talks from working professionals may not be enough to get students to distinguish between career paths. Other career exploration ideas: ask students to review an anonymized resume and suggest what jobs it would and would not be suitable for, with tips for improvement; browse real job ads on Craigslist, Indeed, and LinkedIn, and talk about what differences and similarities they see. The details of this &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;web developer roadmap&lt;/a&gt; are overkill, but if you can find or create a simplified version, it could be a good visual aid.&lt;/p&gt;
&lt;p&gt;A common complaint about CS education is that students are taught too much math and abstract CS which isn't applicable to their future jobs. This is pretty funny to me: in this era of widely distributed systems, big data, and high-performance analytics and availability, you have to design systems for big N. Sampling and distributions are essential to understanding what an SLA (service-level agreement) means for your system's uptime and monitoring needs. Working programmers frequently communicate with QA, sysadmins, UI designers, and DBAs. Knowing how to ask the right questions outside your area of expertise is essential.&lt;/p&gt;
&lt;p&gt;A unifying framework supports students making connections as they learn. The &lt;a href="https://apstudent.collegeboard.org/apcourse/ap-computer-science-principles"&gt;AP Computer Science Principles curriculum&lt;/a&gt;, &lt;a href="https://www.csteachers.org/page/standards"&gt;CSTA K-12 Computer Science standards&lt;/a&gt;, and anything drawing on computational thinking has good vocabulary on concepts and practices of computing.&lt;/p&gt;
&lt;!-- (Curious about computational thinking? Here's my take on it.) --&gt;

&lt;h3&gt;My Suggestions&lt;/h3&gt;
&lt;p&gt;My suggestion is to build your curriculum around websites (HTML/CSS/JavaScript/SQL/APIs) and mobile apps (App Inventor -&amp;gt; Java). They are popular with students and potential employers, especially if they lead to a digital portfolio &amp;amp; resume, and touch on:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variables/functions/loops&lt;/li&gt;
&lt;li&gt;how the internet works&lt;/li&gt;
&lt;li&gt;how graphics/processors/caching work&lt;/li&gt;
&lt;li&gt;data structures &amp;amp; algorithms&lt;/li&gt;
&lt;li&gt;databases&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI/wireframing&lt;/li&gt;
&lt;li&gt;prototyping/design workflow&lt;/li&gt;
&lt;li&gt;debugging &amp;amp; QA&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;version control&lt;/li&gt;
&lt;li&gt;testing&lt;/li&gt;
&lt;li&gt;forking/remixing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Design the year around two or three big projects, with smaller hardware or special topics units interspersed. Ideas:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hardware&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ethernet &amp;amp; server installation&lt;/li&gt;
&lt;li&gt;(dis)assembling a PC&lt;/li&gt;
&lt;li&gt;installing Linux on old hardware&lt;/li&gt;
&lt;li&gt;playing with RasPi/Arduinos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Special Topics&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how do you know when your problem is Big Data or AI or machine learning or buzzword of the month?&lt;/li&gt;
&lt;li&gt;basics of network security, threat modelling, password hygiene, &amp;amp; hacking ethics&lt;/li&gt;
&lt;li&gt;build an educational Twitterbot (historical events, procedurally generated text/images, ASCII art)!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At some point students will specialize, but have them team up for at least one project, like they would in the workplace. Front end can work with back end to design a schema &amp;amp; API, or with a DBA for a data visualization project; two backend devs can design modules to work together; tech writers &amp;amp; QA can interpret requirements, etc. Talk to your math faculty to find out when students learn stats &amp;amp; probability (monitoring/availability/SLAs), geometry/trigonometry &amp;amp; linear algebra (graphics), and limits &amp;amp; induction (algorithmic analysis). If you have to cover Office, definitely include a deep look at programming with Excel (if you use Google Docs, you can add &lt;a href="https://developers.google.com/apps-script/"&gt;Apps Script&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;Resources for teaching programming abound, but here are a few tools I've used or heard good things about, in addition to those listed above. &lt;a href="https://c9.io/"&gt;Cloud9&lt;/a&gt; is an editor/dev environment; &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt; is another, directly aimed at web/API scripting and remixing. I've always wanted to use &lt;a href="https://twinery.org/"&gt;Twine&lt;/a&gt; to do a ELA/programming interactive storytelling unit. Have you used any of these tools in your classroom?&lt;/p&gt;</content><category term="posts"></category><category term="computer science"></category><category term="programming"></category><category term="education"></category></entry><entry><title>Teaching Materials Selection in High School</title><link href="/posts/teaching-materials-selection-in-high-school.html" rel="alternate"></link><published>2017-06-13T00:00:00-04:00</published><updated>2017-06-13T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-06-13:/posts/teaching-materials-selection-in-high-school.html</id><summary type="html">&lt;p&gt;Materials selection and Ashby charts are rarely covered in depth for most STEM students or teachers, so I wanted to give them strong guidance. Here's my advice.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few months ago, a former colleague lead a project where students designed, prototyped, and pitched a model of an urban watershed for use as a teaching tool. They had already interviewed local water department staff and watershed educators. Now the instructors contacted me for ideas about supplies and activities for prototyping. Materials selection and Ashby charts are rarely covered in depth for most STEM students or teachers, so I wanted to give them strong guidance. Here's my advice:&lt;/p&gt;
&lt;!--more--&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find a maker or engineer to visit or consult. I put a call out to my network and got a response from an exhibit designer at the city’s science museum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drawings are the quickest way to explore design ideas, so don’t jump immediately to the laser cutter! In addition to 2D paper sketches, consider Sketchup or another modeling program to build 3D visualization skills, especially for younger students.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Essential questions: What is the timeline? budget? What concepts or lessons is this model trying to teach? What goals does it serve? What functions or properties does it need to accomplish that?&lt;/p&gt;
&lt;p&gt;Ideally students would come up with these questions, and some of their answers, during the project introduction. One way to get started is to ask students to think about the 5 Ws: Who will use this? When? Where? To do What? Why?&lt;/p&gt;
&lt;p&gt;Or, have them fill in the blank: This model needs to be &lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;_&lt;/p&gt;
&lt;p&gt;(cheap, durable, easy to build, easy to fix, fixable without special tools, expandable/upgradable, waterproof, easy to clean, not too heavy, collapsible, creative)&lt;/p&gt;
&lt;p&gt;Write down these answers and post them on the wall for easy reference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grab some boxes and take an hour after school gathering up prototyping materials: plywood, lumber, acrylic sheet, felt/fabric, plastic bottles/containers, metal bars, tile, XPS foam, glass pebbles, PVC pipes, polycarbonate sheet, landscaping/craft foam, aluminum foil, plastic wrap... Also gather scissors, glue guns, box cutters, Gorilla glue, tape, glue sticks, and other tabletop cutting and fastening supplies. Maybe also markers, graph paper, and rulers. Use the boxes to organize everything per classroom and per group. Anything you can’t find or don’t have enough of, put in an order now!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For pointers on how to break down the materials selection process, I recommend MIT D-Lab’s excellent &lt;a href="https://d-lab.mit.edu/sites/default/files/D-Lab_Learn-It_Material-selection.pdf"&gt;Materials Selection poster&lt;/a&gt;. (They also have resources on &lt;a href="https://d-lab.mit.edu/sites/default/files/D-Lab_Learn-It_Adhesives.pdf"&gt;Adhesives&lt;/a&gt; and &lt;a href="https://d-lab.mit.edu/sites/default/files/D-Lab_Learn-It_Fasteners_0.pdf"&gt;Fasteners&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Ask students to look at the table at the top to get acquainted with the key questions and comparisons between wood, metal, and plastic. Which parts of this chart are relevant to this project? What would you add? Is color or paintability important, or not? Having samples of materials on hand can help demonstrate differences in weight, strength, absorption, etc. and get ideas flowing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, to ground it in the logistics of the fabrication shop, ask students to split up and make a list of machines and the materials each one can cut or join. Add notes on how much time/effort is involved in each method; for example, the entire 10th grade probably can’t design and laser cut multiple iterations in a week. Students may realize they need to improve their CAD skills or get trained on a machine - now is the time to schedule some tutorials!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step back and check your list of which properties are most important for the prototype and the final product (remember, they may not be the same!) A model you hope to manufacture in bulk as a teaching aid might need to be light, strong, cheap, and waterproof. What combination of materials and manufacturing techniques can accomplish that? You may need to try something out, like comparing the behavior of plywood vs. lumber in water, or do more research, like finding out exactly which plastics can be cut safely on the laser cutter.&lt;/p&gt;
&lt;p&gt;By the time their prototypes are built, students should be able to explain why they chose the materials and manufacturing methods they did. Their analysis can also inform recommendations on how the final product should be produced, although design for manufacturing is a whole topic on its own.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Often, teachers design activities to use what's on hand, or what can be acquired cheaply and in bulk. But students need to learn how different materials behave, just like they need to learn how different tools work. Materials selection is part of the engineering design process, so I hope I've given you some ideas on how to include it in your next maker project!&lt;/p&gt;</content><category term="posts"></category><category term="materials science"></category><category term="education"></category><category term="design"></category><category term="prototyping"></category></entry><entry><title>Advent of Code</title><link href="/posts/advent-of-code.html" rel="alternate"></link><published>2017-01-07T00:00:00-05:00</published><updated>2017-01-07T00:00:00-05:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2017-01-07:/posts/advent-of-code.html</id><summary type="html">&lt;p&gt;&lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; is an annual challenge during the month of December, posing short puzzles that generally require code to solve. Although I've never seriously competed, I have completed for my own enjoyment every puzzle from 2016, and nearly every one from 2015. The solutions from 2016 are annotated for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; is an annual challenge during the month of December, posing short puzzles that generally require code to solve. Although I've never seriously competed, I have completed for my own enjoyment every puzzle from 2016, and nearly every one from 2015. The solutions from 2016 are annotated for potential teaching use, as well as showing off my problem-solving skills. Some 2015 solutions include type hinting via &lt;a href="https://mypy.readthedocs.io/en/latest/index.html"&gt;mypy&lt;/a&gt;, an approach I later abandoned. The solutions and corresponding test suites are &lt;a href="https://github.com/christalee/AoC"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="programming"></category><category term="python"></category><category term="javascript"></category></entry><entry><title>Berrybasket</title><link href="/posts/berrybasket.html" rel="alternate"></link><published>2013-06-07T00:00:00-04:00</published><updated>2013-06-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2013-06-07:/posts/berrybasket.html</id><summary type="html">&lt;p&gt;In 2013 my partner Daniel and I were teaching at The Hacktory, a Philadelphia makerspace, mostly about circuits. A friend approached us about teaming up with an elementary science teacher for a unit on datalogging in (cardboard) houses, since Daniel's former job involved datalogging in (real) houses. The students were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In 2013 my partner Daniel and I were teaching at The Hacktory, a Philadelphia makerspace, mostly about circuits. A friend approached us about teaming up with an elementary science teacher for a unit on datalogging in (cardboard) houses, since Daniel's former job involved datalogging in (real) houses. The students were learning about solar gain and heat transfer, and each group made modifications to their house to improve its comfort: sealing the window, adding black paper or aluminum foil to the exterior, increasing the thermal mass with a cup of water, etc. Then the houses went out on the roof for a week, each wired up with a temperature sensor running back to a Raspberry Pi located in the classroom, sending data every 10 minutes to an online feed. We used that data to teach a lesson on interpreting graphs, making connections to their house modifications, the weather, and other experiments they'd done with lamps and handheld thermometers. You can find the &lt;a href="https://bergey.github.io/berrybasket/"&gt;full technical details&lt;/a&gt; at Daniel's site.&lt;/p&gt;
&lt;p&gt;My contribution to this project was primarily soldering and assembling the circuitry, as my Python skills were rudimentary back then. Working with the students was very interesting, they noticed more about the graphs than I expected and were really enthusiastic about the lesson. Preparing and presenting our poster at OHS 2013 was also a wonderful experience, I hadn't engaged much with the open hardware community before that.&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="making"></category><category term="programming"></category><category term="python"></category></entry><entry><title>The Hacktory</title><link href="/posts/the-hacktory.html" rel="alternate"></link><published>2013-06-07T00:00:00-04:00</published><updated>2013-06-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2013-06-07:/posts/the-hacktory.html</id><summary type="html">&lt;p&gt;When I moved to Philadelphia, I got involved in a local makerspace, The Hacktory. They provided a great platform for teaching others and tinkering on my own projects. Here are a few of the activities I worked on there.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I moved to Philadelphia, I got involved in a local makerspace, The Hacktory. They provided a great platform for teaching others and tinkering on my own projects. Here are a few of the activities I worked on there.&lt;/p&gt;
&lt;p&gt;Introduction to Sensors, July 2012 (with Daniel Bergey): &lt;a href="/files/sensors_overview.html"&gt;Overview&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class 1 &lt;a href="/files/sensors_class1_outline.pdf"&gt;Outline&lt;/a&gt;, &lt;a href="/files/sensors_class1_handout.pdf"&gt;Handout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Class 2 &lt;a href="/files/sensors_class2_outline.pdf"&gt;Outline&lt;/a&gt;, &lt;a href="/files/sensors_class2_handout.pdf"&gt;Handout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recycled Electronics Jewelry, December 2012: &lt;a href="https://www.flickr.com/photos/thehacktory/albums/72157632148528018"&gt;Photos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Starry Night T-Shirt, April 2013: &lt;a href="/files/tshirt_workshop.pdf"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/led_patch.jpg" /&gt;
&lt;figcaption class="small"&gt;Girl Scout Patches&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Girl Scout Patches, May 2013: &lt;a href="https://www.flickr.com/photos/thehacktory/albums/72157633628918935"&gt;Photos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Meet the Multimeter, July 2013 (with Steph Alarcón): &lt;a href="/files/multimeter_slides.pdf"&gt;Slides&lt;/a&gt;, &lt;a href="/files/multimeter_handout.pdf"&gt;Handout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LED Lightbox, August 2013: &lt;a href="https://www.flickr.com/photos/thehacktory/albums/72157635093569045"&gt;Photos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Introduction to Circuits, September 2013 (with Abby Seligsohn): &lt;a href="/files/circuits_slides.pdf"&gt;Slides&lt;/a&gt;, &lt;a href="/files/circuits_handout.pdf"&gt;Handout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sew an LED Mask, October 2013 (with Abby Seligsohn): &lt;a href="/files/led_masks_handout.pdf"&gt;Handout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Costuming with EL Wire, October 2013: &lt;a href="https://www.flickr.com/photos/thehacktory/albums/72157633628918935"&gt;Photos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sew an LED Monster, June 2014 (with Allison Frick): &lt;a href="/files/monsters_slides.pdf"&gt;Slides&lt;/a&gt;, &lt;a href="/files/monsters.pdf"&gt;Handout&lt;/a&gt;, &lt;a href="/files/led_monsters_supplies.txt"&gt;Supplies&lt;/a&gt;&lt;/p&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/led_mask.jpg" /&gt;
&lt;figcaption class="small"&gt;Sew an LED Mask&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Robot Jam, April 2016: &lt;a href="https://www.flickr.com/photos/thehacktory/albums/72157667918411435"&gt;Photos&lt;/a&gt;&lt;/p&gt;</content><category term="posts"></category><category term="making"></category><category term="hobbies"></category><category term="portfolio"></category><category term="education"></category></entry><entry><title>MIT OCW Highlights</title><link href="/posts/mit-ocw-highlights.html" rel="alternate"></link><published>2011-09-07T00:00:00-04:00</published><updated>2011-09-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2011-09-07:/posts/mit-ocw-highlights.html</id><summary type="html">&lt;p&gt;You never forget your first, and for me, it's true for my first job: working with faculty to publish open educational content at &lt;a href="https://ocw.mit.edu/"&gt;MIT OpenCourseWare&lt;/a&gt;. A massive undertaking, OCW's original remit was to publish the entirety of MIT's curriculum online under an open license, for reuse and remixing. I was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You never forget your first, and for me, it's true for my first job: working with faculty to publish open educational content at &lt;a href="https://ocw.mit.edu/"&gt;MIT OpenCourseWare&lt;/a&gt;. A massive undertaking, OCW's original remit was to publish the entirety of MIT's curriculum online under an open license, for reuse and remixing. I was lucky enough to be present when they hit the milestone of 2000 courses published, and they've come quite a ways since then.&lt;/p&gt;
&lt;p&gt;But beyond the world-changing nature of the project itself, my time at OCW was unforgettable because of my colleagues, who taught me so much about how to negotiate the working world and laid the foundation for my intellectual and career pursuits. I also learned to get oriented to a new topic quickly, since we worked on new courses every 2 weeks. I needed to assess the content and handle any IP issues with an understanding of the student viewpoint, whether the course was an introductory survey course or a graduate elective.&lt;/p&gt;
&lt;p&gt;I published many courses during my tenure there, but these are some of my favorites, either technically challenging or just plain fascinating content.&lt;/p&gt;
&lt;h3&gt;Supplemental Resources&lt;/h3&gt;
&lt;p&gt;These were published not as part of any specific MIT course, but as general teaching resources.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/resources/res-18-004-the-torch-or-the-firehose-a-guide-to-section-teaching-spring-2009/online-publication/"&gt;The Torch or the Firehose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/resources/res-2-002-finite-element-procedures-for-solids-and-structures-spring-2010/"&gt;Finite Element Procedures for Solids and Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/resources/res-21g-01-kana-spring-2010/"&gt;Kana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/resources/res-21g-003-learning-chinese-a-foundation-course-in-mandarin-spring-2011/"&gt;Learning Chinese: A Foundation Course in Mandarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Custom Layouts&lt;/h3&gt;
&lt;p&gt;Typically courses were published with a tab for each resource type (lecture notes, exams, assignments, etc.) but occasionally we would publish material that demanded a different layout. Coming up with a custom page design that organized material by topic, while still being easy to navigate for users, was always a good fun challenge.&lt;/p&gt;
&lt;p&gt;I'd like to shout-out the first link here, which was a course I worked on with 2 colleagues, but they graciously allowed me to organize a topic map and page template for the entire course. Any day I got to bring content-specific knowledge to work was a good one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/materials-science-and-engineering/3-091sc-introduction-to-solid-state-chemistry-fall-2010/"&gt;Introduction to Solid State Chemistry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-050j-information-and-entropy-spring-2008/"&gt;Information &amp;amp; Entropy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/materials-science-and-engineering/3-a27-case-studies-in-forensic-metallurgy-fall-2007/"&gt;Case Studies in Forensic Metallurgy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Transcription&lt;/h3&gt;
&lt;p&gt;For these courses, I supervised a student transcriptionist to produce typed versions of the professor's handwritten notes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finite Element Analysis of Solids and Fluids &lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-092-finite-element-analysis-of-solids-and-fluids-i-fall-2009/"&gt;I&lt;/a&gt; and &lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-094-finite-element-analysis-of-solids-and-fluids-ii-spring-2011/"&gt;II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-081j-plates-and-shells-spring-2007/"&gt;Plates and Shells&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Multimedia&lt;/h3&gt;
&lt;p&gt;These courses include image galleries, audio lectures, or video lectures.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-830j-control-of-manufacturing-processes-sma-6303-spring-2008/"&gt;Control of Manufacturing Processes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-71-optics-spring-2009/"&gt;Optics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/mechanical-engineering/2-997-direct-solar-thermal-to-electrical-energy-conversion-technologies-fall-2009/"&gt;Direct Solar/Thermal to Electrical Energy Conversion Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/comparative-media-studies-writing/cms-608-game-design-fall-2010/"&gt;Game Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/materials-science-and-engineering/3-a04-modern-blacksmithing-and-physical-metallurgy-fall-2008/"&gt;Modern Blacksmithing and Physical Metallurgy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ocw.mit.edu/courses/music-and-theater-arts/21m-715-the-craft-of-costume-design-fall-2009/index.htm"&gt;The Craft of Costume Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="publishing"></category></entry><entry><title>Cider Press</title><link href="/posts/cider-press.html" rel="alternate"></link><published>2009-10-07T00:00:00-04:00</published><updated>2009-10-07T00:00:00-04:00</updated><author><name>Christalee Bieber</name></author><id>tag:None,2009-10-07:/posts/cider-press.html</id><summary type="html">&lt;p&gt;Once upon a time, my friends and I went apple-picking, and decided we wanted to make some hard cider. So we got in touch with a friend of a friend who had a working cider press, drove out to the coast, and pressed some apples. This was great fun, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Once upon a time, my friends and I went apple-picking, and decided we wanted to make some hard cider. So we got in touch with a friend of a friend who had a working cider press, drove out to the coast, and pressed some apples. This was great fun, but the next year we wanted to use our own cider press, instead of taking a road trip to someone else's. My partner Daniel and I had a few design constraints: that the footprint fit in our apartment kitchen, and that the press should disassemble for easy storage.&lt;/p&gt;
&lt;p&gt;So we came up with a design that used a hydraulic bottle jack, pressing an inch thick follower into a pressing barrel (with gaps between the slats) full of shredded apples. The apple juice flowed out and down and onto a tray lined with food-grade PET, into a bucket. We constructed the barrel, catch-tray, a wooden mesh to keep the apples from damming the flow, and a frame to hold the whole assembly.&lt;/p&gt;
&lt;figure class="figure-img"&gt;
&lt;img src="/images/cider-press-2.jpg" /&gt;
&lt;figcaption class="small"&gt;The entire press, disassembled (bottom to top): old catch-tray, plastic for new catch-tray, wooden mesh, follower, jack, barrel, metal/wood frame.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Building the system to properly direct and withstand the force of the jack was the hardest part of this project. We knew that we could cause serious damage if a component failed under load. The jack bears onto a metal box-beam, attached with threaded rods to another box-beam under the catch tray. The wooden frame runs through the box-beams, so it hold the weight of the assembly, but the threaded rod bears the force of the compressed apples, and is rated accordingly. We also calculated the forces on the barrel slats, so we could cut them to an adequate thickness and fasten the hoops with strong enough bolts. We used white oak for the barrel, follower, and mesh; its closed-cell structure makes it naturally resistant to absorbing liquid.&lt;/p&gt;
&lt;p&gt;We've used our press to make several batches of hard cider and hosted multiple community apple-pressing events, where everyone brings some apples and goes home with some cider. Currently the press is in need of some repairs, including a new catch-tray that will be easier to sterilize. I look forward to bringing the fun of home engineering to more audiences next year!&lt;/p&gt;</content><category term="posts"></category><category term="portfolio"></category><category term="making"></category><category term="hobbies"></category></entry></feed>